use snmp_usm::{
    self, Aes128PrivKey, LocalizedMd5Key, LocalizedSha1Key, PrivKey, SecurityError, SecurityParams,
    WithLocalizedKey,
};

const ENGINE_ID: [u8; 17] = [
    0x80, 0x00, 0x1f, 0x88, 0x80, 0xfa, 0xa8, 0x11, 0x60, 0x0f, 0xa2, 0xc5, 0x5e, 0x00, 0x00, 0x00,
    0x00,
];

#[test]
fn it_encrypts_scoped_pdu_using_localized_md5_key() {
    let priv_key = Aes128PrivKey::with_localized_key(LocalizedMd5Key::new(b"12345678", &ENGINE_ID));

    let scoped_pdu = vec![
        0x30, 0x30, 0x04, 0x11, 0x80, 0x00, 0x1F, 0x88, 0x80, 0xFA, 0xA8, 0x11, 0x60, 0x0F, 0xA2,
        0xC5, 0x5E, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xA0, 0x19, 0x02, 0x01, 0x01, 0x02, 0x01,
        0x00, 0x02, 0x01, 0x00, 0x30, 0x0E, 0x30, 0x0C, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x02, 0x01,
        0x01, 0x01, 0x00, 0x05, 0x00,
    ];

    let mut security_params = SecurityParams::new();
    security_params.set_engine_boots(45).set_engine_time(68902);

    let (encrypted_scoped_pdu, salt) = priv_key.encrypt(scoped_pdu, &security_params, 0);

    let expected_scoped_pdu = vec![
        0x09, 0x97, 0x08, 0xD3, 0x62, 0x4D, 0x89, 0x08, 0x39, 0x41, 0xDB, 0x0C, 0x92, 0xD5, 0x36,
        0xDC, 0xFF, 0xC0, 0x61, 0x6A, 0x6C, 0x88, 0x15, 0x4D, 0x9A, 0x85, 0x30, 0x10, 0x05, 0x4B,
        0x9E, 0xBA, 0xA6, 0x0A, 0x52, 0x38, 0x08, 0x86, 0x4F, 0x5F, 0x44, 0x0E, 0x8C, 0x60, 0x63,
        0x5A, 0xD2, 0x8E, 0x99, 0x00,
    ];
    assert_eq!(encrypted_scoped_pdu, expected_scoped_pdu);

    let expected_salt = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    assert_eq!(salt, expected_salt);
}

#[test]
fn it_encrypts_scoped_pdu_using_localized_sha1_key() {
    let priv_key =
        Aes128PrivKey::with_localized_key(LocalizedSha1Key::new(b"12345678", &ENGINE_ID));

    let scoped_pdu = vec![
        0x30, 0x30, 0x04, 0x11, 0x80, 0x00, 0x1F, 0x88, 0x80, 0xFA, 0xA8, 0x11, 0x60, 0x0F, 0xA2,
        0xC5, 0x5E, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xA0, 0x19, 0x02, 0x01, 0x01, 0x02, 0x01,
        0x00, 0x02, 0x01, 0x00, 0x30, 0x0E, 0x30, 0x0C, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x02, 0x01,
        0x01, 0x01, 0x00, 0x05, 0x00,
    ];

    let mut security_params = SecurityParams::new();
    security_params.set_engine_boots(46).set_engine_time(195);

    let (encrypted_scoped_pdu, salt) = priv_key.encrypt(scoped_pdu, &security_params, 0);

    let expected_scoped_pdu = vec![
        0xDB, 0x67, 0xD4, 0x26, 0xD3, 0x24, 0xD7, 0x5B, 0x84, 0x68, 0x25, 0x3F, 0x30, 0xE0, 0x71,
        0xE4, 0xD2, 0x55, 0x2E, 0xC1, 0xB1, 0x9D, 0xA8, 0xB9, 0x11, 0x3E, 0x0D, 0xCF, 0x76, 0xBC,
        0xE1, 0xDD, 0x7D, 0x02, 0x7C, 0x15, 0x91, 0xD9, 0x91, 0x76, 0xB4, 0x83, 0x38, 0x12, 0x08,
        0x13, 0xF3, 0x72, 0x0D, 0xA8,
    ];
    assert_eq!(encrypted_scoped_pdu, expected_scoped_pdu);

    let expected_salt = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    assert_eq!(salt, expected_salt);
}

#[test]
fn it_decrypts_scoped_pdu_using_localized_md5_key() {
    let priv_key = Aes128PrivKey::with_localized_key(LocalizedMd5Key::new(b"12345678", &ENGINE_ID));

    let encrypted_scoped_pdu = vec![
        0x5C, 0x91, 0xA4, 0x5F, 0x81, 0x44, 0xEF, 0xA0, 0x42, 0x9D, 0x8B, 0x38, 0x30, 0x9D, 0x25,
        0x1F, 0x10, 0x96, 0x35, 0xBE, 0x8B, 0xD3, 0xCD, 0xB4, 0x7F, 0x33, 0xDE, 0xE8, 0xE2, 0xF6,
        0x90, 0xE1, 0xA4, 0x63, 0x83, 0xA4, 0x2D, 0x8B, 0x5F, 0x4A, 0x62, 0x69, 0xC0, 0xD9, 0x7F,
        0x93, 0xD0, 0x03, 0x26, 0xC8, 0xDA, 0x37, 0xF4, 0x0C, 0x44, 0x0E, 0x2D, 0x6B, 0x55, 0xE7,
        0x17, 0xF8, 0xBF, 0x43, 0xC9, 0x10, 0xC0, 0x6F, 0x7A, 0xB4, 0x3A, 0xAD, 0x68, 0xE4, 0x3F,
        0x42, 0x22, 0x79, 0x80, 0xEF, 0x4E, 0xC1, 0x4A, 0x9D, 0xF6, 0x15, 0x9B, 0x41, 0x8F, 0x69,
        0x62, 0x08, 0x89, 0xBE, 0xCF, 0xC7, 0xAC, 0xC9, 0x85, 0xB0, 0xCF, 0xD8, 0xBD, 0x93, 0x9D,
        0x51, 0xE1, 0x95, 0x65, 0x02, 0xB1, 0xCB, 0x93, 0x62, 0x58, 0x8F, 0x7E, 0x09, 0xE5, 0x06,
        0xB4, 0xBD, 0x81, 0xE0, 0x7C, 0x3F, 0x81, 0xE2, 0x99, 0x91, 0x33, 0x1A, 0x30, 0x4F, 0x90,
        0x18, 0xC1, 0xC5, 0x7B, 0x5D, 0x32, 0xFD, 0xE8, 0x3D, 0x34, 0xBA, 0x21, 0xA5, 0xA6, 0x5C,
        0x1D, 0x3C, 0x77, 0xCD, 0x9E, 0x91, 0x28, 0x65, 0x0F, 0xDA, 0x13, 0x6D, 0xDB, 0x38, 0x86,
        0x86, 0x34, 0x0B, 0xD5, 0xCF, 0x29, 0xD0, 0xD2, 0xB6, 0x2D, 0xAF, 0x6D, 0x7D, 0x8E, 0xC9,
        0x6A, 0x90, 0x68, 0xCD, 0x0C, 0xB7, 0x8F,
    ];
    let mut security_params = SecurityParams::new();
    security_params
        .set_engine_boots(46)
        .set_engine_time(2190)
        .set_priv_params(&[0xFC, 0x3C, 0x76, 0xDE, 0xAB, 0xC6, 0xAD, 0xED]);

    let decrypted_scoped_pdu = priv_key
        .decrypt(encrypted_scoped_pdu, &security_params)
        .unwrap();

    let expected = vec![
        0x30, 0x81, 0xB8, 0x04, 0x11, 0x80, 0x00, 0x1F, 0x88, 0x80, 0xFA, 0xA8, 0x11, 0x60, 0x0F,
        0xA2, 0xC5, 0x5E, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xA2, 0x81, 0xA0, 0x02, 0x01, 0x01,
        0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x30, 0x81, 0x94, 0x30, 0x81, 0x91, 0x06, 0x08, 0x2B,
        0x06, 0x01, 0x02, 0x01, 0x01, 0x01, 0x00, 0x04, 0x81, 0x84, 0x44, 0x61, 0x72, 0x77, 0x69,
        0x6E, 0x20, 0x64, 0x61, 0x76, 0x69, 0x64, 0x73, 0x2D, 0x6D, 0x62, 0x70, 0x2E, 0x6C, 0x61,
        0x6E, 0x20, 0x31, 0x39, 0x2E, 0x35, 0x2E, 0x30, 0x20, 0x44, 0x61, 0x72, 0x77, 0x69, 0x6E,
        0x20, 0x4B, 0x65, 0x72, 0x6E, 0x65, 0x6C, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E,
        0x20, 0x31, 0x39, 0x2E, 0x35, 0x2E, 0x30, 0x3A, 0x20, 0x54, 0x75, 0x65, 0x20, 0x4D, 0x61,
        0x79, 0x20, 0x32, 0x36, 0x20, 0x32, 0x30, 0x3A, 0x34, 0x31, 0x3A, 0x34, 0x34, 0x20, 0x50,
        0x44, 0x54, 0x20, 0x32, 0x30, 0x32, 0x30, 0x3B, 0x20, 0x72, 0x6F, 0x6F, 0x74, 0x3A, 0x78,
        0x6E, 0x75, 0x2D, 0x36, 0x31, 0x35, 0x33, 0x2E, 0x31, 0x32, 0x31, 0x2E, 0x32, 0x7E, 0x32,
        0x2F, 0x52, 0x45, 0x4C, 0x45, 0x41, 0x53, 0x45, 0x5F, 0x58, 0x38, 0x36, 0x5F, 0x36, 0x34,
        0x20, 0x78, 0x38, 0x36, 0x5F, 0x36, 0x34,
    ];
    assert_eq!(decrypted_scoped_pdu, expected);
}

#[test]
fn it_decrypts_scoped_pdu_using_localized_sha1_key() {
    let priv_key =
        Aes128PrivKey::with_localized_key(LocalizedSha1Key::new(b"12345678", &ENGINE_ID));

    let encrypted_scoped_pdu = vec![
        0xFB, 0x91, 0x0B, 0xBC, 0xD3, 0x42, 0xF8, 0x65, 0xD4, 0xAF, 0x89, 0xE5, 0xC1, 0x92, 0x2B,
        0x9B, 0xBA, 0x37, 0x94, 0x59, 0x84, 0x84, 0x8E, 0x01, 0x76, 0xF3, 0xDE, 0x51, 0x50, 0xCB,
        0x30, 0x4D, 0x7E, 0xFC, 0x3D, 0x3C, 0xDF, 0xC0, 0x7A, 0x3C, 0xFB, 0x94, 0xC9, 0x05, 0x87,
        0xE2, 0x5D, 0xD1, 0x16, 0x03, 0xBD, 0x7B, 0xE6, 0x04, 0x2A, 0xD8, 0x2B, 0xEC, 0x0C, 0xA0,
        0xB6, 0x4B, 0xCD, 0xC4, 0xFD, 0xE4, 0x80, 0x06, 0x2D, 0x57, 0x8D, 0x79, 0x36, 0xA5, 0x29,
        0xB2, 0x58, 0x6B, 0x02, 0x91, 0x4D, 0xB8, 0x73, 0x44, 0xB3, 0x9B, 0x69, 0xE8, 0xC4, 0x73,
        0x2A, 0x42, 0x5B, 0x42, 0x9F, 0x20, 0x7D, 0x57, 0x8E, 0x98, 0x84, 0xDF, 0xEE, 0x49, 0x77,
        0x18, 0x6E, 0xB1, 0x57, 0x3E, 0xCA, 0x66, 0xD2, 0x33, 0x67, 0xD4, 0x18, 0x48, 0x44, 0x55,
        0xE2, 0xB7, 0x93, 0xA4, 0xFB, 0xDF, 0x7F, 0x9E, 0x9D, 0xC2, 0x73, 0x5A, 0x87, 0x36, 0xA7,
        0x22, 0xCA, 0xF5, 0x6F, 0x33, 0x2E, 0xC3, 0x37, 0x34, 0xEE, 0x96, 0x10, 0x34, 0x95, 0x5F,
        0xCA, 0x4E, 0x83, 0x5A, 0x64, 0x22, 0xA1, 0xAC, 0xBA, 0x2E, 0xA4, 0xBC, 0x2A, 0xCF, 0xDA,
        0x88, 0xF0, 0xD9, 0xB8, 0xCC, 0x03, 0xDF, 0x2F, 0xD1, 0x27, 0x01, 0x8E, 0x34, 0xB5, 0x6C,
        0x32, 0x45, 0x5F, 0x63, 0x19, 0x5B, 0xE8,
    ];
    let mut security_params = SecurityParams::new();
    security_params
        .set_engine_boots(46)
        .set_engine_time(69550)
        .set_priv_params(&[0xFC, 0x3C, 0x76, 0xDE, 0xAB, 0xC6, 0xAD, 0xEE]);

    let decrypted_scoped_pdu = priv_key
        .decrypt(encrypted_scoped_pdu, &security_params)
        .unwrap();

    let expected = vec![
        0x30, 0x81, 0xB8, 0x04, 0x11, 0x80, 0x00, 0x1F, 0x88, 0x80, 0xFA, 0xA8, 0x11, 0x60, 0x0F,
        0xA2, 0xC5, 0x5E, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xA2, 0x81, 0xA0, 0x02, 0x01, 0x01,
        0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x30, 0x81, 0x94, 0x30, 0x81, 0x91, 0x06, 0x08, 0x2B,
        0x06, 0x01, 0x02, 0x01, 0x01, 0x01, 0x00, 0x04, 0x81, 0x84, 0x44, 0x61, 0x72, 0x77, 0x69,
        0x6E, 0x20, 0x64, 0x61, 0x76, 0x69, 0x64, 0x73, 0x2D, 0x6D, 0x62, 0x70, 0x2E, 0x6C, 0x61,
        0x6E, 0x20, 0x31, 0x39, 0x2E, 0x35, 0x2E, 0x30, 0x20, 0x44, 0x61, 0x72, 0x77, 0x69, 0x6E,
        0x20, 0x4B, 0x65, 0x72, 0x6E, 0x65, 0x6C, 0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E,
        0x20, 0x31, 0x39, 0x2E, 0x35, 0x2E, 0x30, 0x3A, 0x20, 0x54, 0x75, 0x65, 0x20, 0x4D, 0x61,
        0x79, 0x20, 0x32, 0x36, 0x20, 0x32, 0x30, 0x3A, 0x34, 0x31, 0x3A, 0x34, 0x34, 0x20, 0x50,
        0x44, 0x54, 0x20, 0x32, 0x30, 0x32, 0x30, 0x3B, 0x20, 0x72, 0x6F, 0x6F, 0x74, 0x3A, 0x78,
        0x6E, 0x75, 0x2D, 0x36, 0x31, 0x35, 0x33, 0x2E, 0x31, 0x32, 0x31, 0x2E, 0x32, 0x7E, 0x32,
        0x2F, 0x52, 0x45, 0x4C, 0x45, 0x41, 0x53, 0x45, 0x5F, 0x58, 0x38, 0x36, 0x5F, 0x36, 0x34,
        0x20, 0x78, 0x38, 0x36, 0x5F, 0x36, 0x34,
    ];
    assert_eq!(decrypted_scoped_pdu, expected);
}

#[test]
fn it_returns_error_for_priv_params_with_wrong_len() {
    let priv_key =
        Aes128PrivKey::with_localized_key(LocalizedSha1Key::new(b"12345678", &ENGINE_ID));

    let encrypted_scoped_pdu = vec![
        0xFB, 0x91, 0x0B, 0xBC, 0xD3, 0x42, 0xF8, 0x65, 0xD4, 0xAF, 0x89, 0xE5, 0xC1, 0x92, 0x2B,
        0x9B, 0xBA, 0x37, 0x94, 0x59, 0x84, 0x84, 0x8E, 0x01, 0x76, 0xF3, 0xDE, 0x51, 0x50, 0xCB,
        0x30, 0x4D, 0x7E, 0xFC, 0x3D, 0x3C, 0xDF, 0xC0, 0x7A, 0x3C, 0xFB, 0x94, 0xC9, 0x05, 0x87,
        0xE2, 0x5D, 0xD1, 0x16, 0x03, 0xBD, 0x7B, 0xE6, 0x04, 0x2A, 0xD8, 0x2B, 0xEC, 0x0C, 0xA0,
        0xB6, 0x4B, 0xCD, 0xC4, 0xFD, 0xE4, 0x80, 0x06, 0x2D, 0x57, 0x8D, 0x79, 0x36, 0xA5, 0x29,
        0xB2, 0x58, 0x6B, 0x02, 0x91, 0x4D, 0xB8, 0x73, 0x44, 0xB3, 0x9B, 0x69, 0xE8, 0xC4, 0x73,
        0x2A, 0x42, 0x5B, 0x42, 0x9F, 0x20, 0x7D, 0x57, 0x8E, 0x98, 0x84, 0xDF, 0xEE, 0x49, 0x77,
        0x18, 0x6E, 0xB1, 0x57, 0x3E, 0xCA, 0x66, 0xD2, 0x33, 0x67, 0xD4, 0x18, 0x48, 0x44, 0x55,
        0xE2, 0xB7, 0x93, 0xA4, 0xFB, 0xDF, 0x7F, 0x9E, 0x9D, 0xC2, 0x73, 0x5A, 0x87, 0x36, 0xA7,
        0x22, 0xCA, 0xF5, 0x6F, 0x33, 0x2E, 0xC3, 0x37, 0x34, 0xEE, 0x96, 0x10, 0x34, 0x95, 0x5F,
        0xCA, 0x4E, 0x83, 0x5A, 0x64, 0x22, 0xA1, 0xAC, 0xBA, 0x2E, 0xA4, 0xBC, 0x2A, 0xCF, 0xDA,
        0x88, 0xF0, 0xD9, 0xB8, 0xCC, 0x03, 0xDF, 0x2F, 0xD1, 0x27, 0x01, 0x8E, 0x34, 0xB5, 0x6C,
        0x32, 0x45, 0x5F, 0x63, 0x19, 0x5B, 0xE8,
    ];
    let mut security_params = SecurityParams::new();
    security_params
        .set_engine_boots(46)
        .set_engine_time(69550)
        // Missing last byte 0xEE.
        .set_priv_params(&[0xFC, 0x3C, 0x76, 0xDE, 0xAB, 0xC6, 0xAD]);

    let result = priv_key.decrypt(encrypted_scoped_pdu, &security_params);
    assert_eq!(result, Err(SecurityError::DecryptError));
}

#[test]
fn it_returns_empty_vec_when_encrypting_empty_scoped_pdu() {
    let priv_key = Aes128PrivKey::with_localized_key(LocalizedMd5Key::new(b"12345678", &ENGINE_ID));

    let scoped_pdu = vec![];

    let mut security_params = SecurityParams::new();
    security_params.set_engine_boots(45).set_engine_time(68902);

    let (encrypted_scoped_pdu, salt) = priv_key.encrypt(scoped_pdu, &security_params, 0);

    assert_eq!(encrypted_scoped_pdu, vec![]);

    let expected_salt = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];
    assert_eq!(salt, expected_salt);
}

#[test]
fn it_returns_empty_vec_when_decrypting_empty_scoped_pdu() {
    let priv_key = Aes128PrivKey::with_localized_key(LocalizedMd5Key::new(b"12345678", &ENGINE_ID));

    let encrypted_scoped_pdu = vec![];
    let mut security_params = SecurityParams::new();
    security_params
        .set_engine_boots(46)
        .set_engine_time(2190)
        .set_priv_params(&[0xFC, 0x3C, 0x76, 0xDE, 0xAB, 0xC6, 0xAD, 0xED]);

    let decrypted_scoped_pdu = priv_key
        .decrypt(encrypted_scoped_pdu, &security_params)
        .unwrap();

    assert_eq!(decrypted_scoped_pdu, vec![]);
}
