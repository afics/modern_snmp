use snmp_mp::{MsgProcessingResult, PduErrorStatus, ScopedPdu};

#[test]
fn it_encodes_scoped_pdu() {
    let mut scoped_pdu = ScopedPdu::new(1893886541);
    scoped_pdu
        .set_engine_id(b"80001f8880faa811600fa2c55e00000000")
        .set_context_name(b"context_name");

    let encoded_scoped_pdu = scoped_pdu.encode();
    let expected = vec![
        0x30, 0x42, 0x04, 0x22, 0x38, 0x30, 0x30, 0x30, 0x31, 0x66, 0x38, 0x38, 0x38, 0x30, 0x66,
        0x61, 0x61, 0x38, 0x31, 0x31, 0x36, 0x30, 0x30, 0x66, 0x61, 0x32, 0x63, 0x35, 0x35, 0x65,
        0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x04, 0x0C, 0x63, 0x6F, 0x6E, 0x74, 0x65,
        0x78, 0x74, 0x5F, 0x6E, 0x61, 0x6D, 0x65, 0xA0, 0x0E, 0x02, 0x04, 0x70, 0xE2, 0x6A, 0x4D,
        0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x30, 0x00,
    ];

    assert_eq!(encoded_scoped_pdu, expected);
}

#[test]
fn it_decodes_scoped_pdu() -> MsgProcessingResult<()> {
    let encoded_scoped_pdu = vec![
        0x30, 0x33, 0x04, 0x11, 0x80, 0x00, 0x1F, 0x88, 0x80, 0xFA, 0xA8, 0x11, 0x60, 0x0F, 0xA2,
        0xC5, 0x5E, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xA0, 0x1C, 0x02, 0x04, 0x70, 0xE2, 0x6A,
        0x4D, 0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x30, 0x0E, 0x30, 0x0C, 0x06, 0x08, 0x2B, 0x06,
        0x01, 0x02, 0x01, 0x01, 0x01, 0x00, 0x05, 0x00,
    ];
    let scoped_pdu = ScopedPdu::decode(&encoded_scoped_pdu)?;

    assert_eq!(scoped_pdu.request_id(), 1893886541);

    let engine_id = [
        0x80, 0x00, 0x1F, 0x88, 0x80, 0xFA, 0xA8, 0x11, 0x60, 0x0F, 0xA2, 0xc5, 0x5E, 0x00, 0x00,
        0x00, 0x00,
    ];
    assert_eq!(scoped_pdu.engine_id(), engine_id);

    assert_eq!(scoped_pdu.error_status(), PduErrorStatus::NoError);
    assert_eq!(scoped_pdu.error_index(), 0);

    Ok(())
}

#[test]
fn it_decodes_scoped_pdu_with_extra_bytes_at_the_end() -> MsgProcessingResult<()> {
    let encoded_scoped_pdu = vec![
        0x30, 0x33, 0x04, 0x11, 0x80, 0x00, 0x1F, 0x88, 0x80, 0xFA, 0xA8, 0x11, 0x60, 0x0F, 0xA2,
        0xC5, 0x5E, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0xA0, 0x1C, 0x02, 0x04, 0x70, 0xE2, 0x6A,
        0x4D, 0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x30, 0x0E, 0x30, 0x0C, 0x06, 0x08, 0x2B, 0x06,
        0x01, 0x02, 0x01, 0x01, 0x01, 0x00, 0x05, 0x00, 0x02, 0x02,
    ];
    let scoped_pdu = ScopedPdu::decode(&encoded_scoped_pdu)?;

    assert_eq!(scoped_pdu.request_id(), 1893886541);

    let engine_id = [
        0x80, 0x00, 0x1F, 0x88, 0x80, 0xFA, 0xA8, 0x11, 0x60, 0x0F, 0xA2, 0xc5, 0x5E, 0x00, 0x00,
        0x00, 0x00,
    ];
    assert_eq!(scoped_pdu.engine_id(), engine_id);

    assert_eq!(scoped_pdu.error_status(), PduErrorStatus::NoError);
    assert_eq!(scoped_pdu.error_index(), 0);

    Ok(())
}
